# MakeVector_CacheMean.R
# Instruction of running the code and its validation.

# 1. Copy and paste the two functions into the console, after pressing enter 
# functions will show up in the global environment in R.

# 2. Then type the following test case, for the code validation:
# > a<-matrix(2:5, 2,2)
# > b<-solve(a)   #calculate matrix inversion using the solve function
# > a
# [,1] [,2]
# [1,]    2    4
# [2,]    3    5
# > b
# [,1] [,2]
# [1,] -2.5    2
# [2,]  1.5   -1

# 3. Validation of the code

# Part 1 of 2. 
# Type the following:
# > a<-matrix(2:5, 2,2)
# > c<-makeCacheMatrix(a)
# > c

# Part 2 of 2
# Type the following:
# > v<-cacheSolve(c)
# > v   #calculating matrix inversion for the first time 
# [,1] [,2]
# [1,] -2.5    2
# [2,]  1.5   -1
# > v<-cacheSolve(c)     # checking if data (matrix inversion) has already been 
# calculated and if so, getting it from the cache environment
# "getting catched inverse matrix data" message will appearv

# > v
# [,1] [,2]
# [1,] -2.5    2
# [2,]  1.5   -1

# The validation has been completed. Thhe inverse matrix has been calculated
# first time and returned second time, becasue it has already been calculated 
# and set in the global environment.



#### THE MAIN CODE ####

# Part 1 of 2

# The function 'makeCacheMatrix' creates a special "matrix" object (like 
# a matrix empty frame) and then it can cache its inverse that is saved into
# the global environment.
# After running the function, it is written into the global environment.
# The special "matrix" object is returned by `makeCacheMatrix`.


makeCacheMatrix <- function(x = matrix()) {
      m <-NULL
      set <- function (y) {   # 1. Set the value of the vector
            x <<- y
            m <<- NULL
      }
      get <- function () x    # 2. Get the value of the vector
      
      setSolve <- function(solve) m <<- solve   # 3. Set the value of the solve 
                                                # function (solve function 
                                                # calculates matrix inverse of
                                                # )
      
      getSolve <- function() m     # 4. Get the value of the solve function 
                                   # calculated already
                                
      list (set = set, get = get,
            setSolve = setSolve,
            getSolve = getSolve)
}

# Part 2 of 2

# The function 'cacheSolve' computes the inverse of the special
# "matrix" returned by `makeCacheMatrix` above. If the inverse has
# already been calculated (and the matrix has not changed), then
# `cacheSolve` should retrieve the inverse from the cache.


cacheSolve <- function(x, ...) {
      # Return a matrix that is the inverse of 'x'. Matrix needs to be square,
      # and assume it is invertible.
      m <- x$getSolve()   # 1. Check if the solve function for the given x
                          # has been already calculated
      if(!is.null(m)) {
            message ("getting catched inverse matrix data")   # 2. If it has 
            # already been calculated, give the message,  
            return(m)   # and return the value of the solve function
      }
      data <- x$get()
      m <- solve(data, ...)   # 3. If no solve function has been calculated
       #  before, calculate the solve function for the data
      x$setSolve(m)  # 4. Set the value of this solve function calculation
      m              # 5. Return the value 
}

